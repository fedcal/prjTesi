/* tslint:disable */
/* eslint-disable */
/**
 * Applicativo BFF
 * Strato applicativo tramite il quale si fa interfacciare i vari microservizi BE con l\'applicativo FE
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: f.calo29@studenti.uniba.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GenericResponseDtoListRagBotPdfDto } from '../model';
// @ts-ignore
import type { GenericResponseDtoRagBotPdfDto } from '../model';
// @ts-ignore
import type { GenericResponseDtoString } from '../model';
// @ts-ignore
import type { ModificaBotParams } from '../model';
// @ts-ignore
import type { RegistraBotParams } from '../model';
// @ts-ignore
import type { TrovaBotParams } from '../model';
/**
 * GestioneBotRagApi - axios parameter creator
 * @export
 */
export const GestioneBotRagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Elenco dei bot registrati nel database
         * @summary Elenco bot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elencoBot: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reag-bot-management/visualizza`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Elimina un bot nel database
         * @summary Elemina bot
         * @param {string} nomeBot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminaBot: async (nomeBot: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nomeBot' is not null or undefined
            assertParamExists('eliminaBot', 'nomeBot', nomeBot)
            const localVarPath = `/reag-bot-management/elimina`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nomeBot !== undefined) {
                localVarQueryParameter['nomeBot'] = nomeBot;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifica le informazioni del bot registrate nel database
         * @summary Modifica bot
         * @param {ModificaBotParams} modificaBotParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modificaBot: async (modificaBotParams: ModificaBotParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modificaBotParams' is not null or undefined
            assertParamExists('modificaBot', 'modificaBotParams', modificaBotParams)
            const localVarPath = `/reag-bot-management/modifica`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificaBotParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registrazione di un bot all\'interno del database
         * @summary Registra bot
         * @param {RegistraBotParams} registraBotParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registraBot: async (registraBotParams: RegistraBotParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registraBotParams' is not null or undefined
            assertParamExists('registraBot', 'registraBotParams', registraBotParams)
            const localVarPath = `/reag-bot-management/registra`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registraBotParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trova un bot nel database
         * @summary Trova bot
         * @param {TrovaBotParams} trovaBotParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trovaBot: async (trovaBotParam: TrovaBotParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trovaBotParam' is not null or undefined
            assertParamExists('trovaBot', 'trovaBotParam', trovaBotParam)
            const localVarPath = `/reag-bot-management/cerca`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (trovaBotParam !== undefined) {
                for (const [key, value] of Object.entries(trovaBotParam)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GestioneBotRagApi - functional programming interface
 * @export
 */
export const GestioneBotRagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GestioneBotRagApiAxiosParamCreator(configuration)
    return {
        /**
         * Elenco dei bot registrati nel database
         * @summary Elenco bot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elencoBot(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoListRagBotPdfDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elencoBot(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GestioneBotRagApi.elencoBot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Elimina un bot nel database
         * @summary Elemina bot
         * @param {string} nomeBot 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eliminaBot(nomeBot: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eliminaBot(nomeBot, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GestioneBotRagApi.eliminaBot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modifica le informazioni del bot registrate nel database
         * @summary Modifica bot
         * @param {ModificaBotParams} modificaBotParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modificaBot(modificaBotParams: ModificaBotParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoRagBotPdfDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modificaBot(modificaBotParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GestioneBotRagApi.modificaBot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Registrazione di un bot all\'interno del database
         * @summary Registra bot
         * @param {RegistraBotParams} registraBotParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registraBot(registraBotParams: RegistraBotParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoRagBotPdfDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registraBot(registraBotParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GestioneBotRagApi.registraBot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Trova un bot nel database
         * @summary Trova bot
         * @param {TrovaBotParams} trovaBotParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trovaBot(trovaBotParam: TrovaBotParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoRagBotPdfDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trovaBot(trovaBotParam, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GestioneBotRagApi.trovaBot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GestioneBotRagApi - factory interface
 * @export
 */
export const GestioneBotRagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GestioneBotRagApiFp(configuration)
    return {
        /**
         * Elenco dei bot registrati nel database
         * @summary Elenco bot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elencoBot(options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoListRagBotPdfDto> {
            return localVarFp.elencoBot(options).then((request) => request(axios, basePath));
        },
        /**
         * Elimina un bot nel database
         * @summary Elemina bot
         * @param {GestioneBotRagApiEliminaBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminaBot(requestParameters: GestioneBotRagApiEliminaBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoString> {
            return localVarFp.eliminaBot(requestParameters.nomeBot, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifica le informazioni del bot registrate nel database
         * @summary Modifica bot
         * @param {GestioneBotRagApiModificaBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modificaBot(requestParameters: GestioneBotRagApiModificaBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoRagBotPdfDto> {
            return localVarFp.modificaBot(requestParameters.modificaBotParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Registrazione di un bot all\'interno del database
         * @summary Registra bot
         * @param {GestioneBotRagApiRegistraBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registraBot(requestParameters: GestioneBotRagApiRegistraBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoRagBotPdfDto> {
            return localVarFp.registraBot(requestParameters.registraBotParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Trova un bot nel database
         * @summary Trova bot
         * @param {GestioneBotRagApiTrovaBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trovaBot(requestParameters: GestioneBotRagApiTrovaBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoRagBotPdfDto> {
            return localVarFp.trovaBot(requestParameters.trovaBotParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for eliminaBot operation in GestioneBotRagApi.
 * @export
 * @interface GestioneBotRagApiEliminaBotRequest
 */
export interface GestioneBotRagApiEliminaBotRequest {
    /**
     * 
     * @type {string}
     * @memberof GestioneBotRagApiEliminaBot
     */
    readonly nomeBot: string
}

/**
 * Request parameters for modificaBot operation in GestioneBotRagApi.
 * @export
 * @interface GestioneBotRagApiModificaBotRequest
 */
export interface GestioneBotRagApiModificaBotRequest {
    /**
     * 
     * @type {ModificaBotParams}
     * @memberof GestioneBotRagApiModificaBot
     */
    readonly modificaBotParams: ModificaBotParams
}

/**
 * Request parameters for registraBot operation in GestioneBotRagApi.
 * @export
 * @interface GestioneBotRagApiRegistraBotRequest
 */
export interface GestioneBotRagApiRegistraBotRequest {
    /**
     * 
     * @type {RegistraBotParams}
     * @memberof GestioneBotRagApiRegistraBot
     */
    readonly registraBotParams: RegistraBotParams
}

/**
 * Request parameters for trovaBot operation in GestioneBotRagApi.
 * @export
 * @interface GestioneBotRagApiTrovaBotRequest
 */
export interface GestioneBotRagApiTrovaBotRequest {
    /**
     * 
     * @type {TrovaBotParams}
     * @memberof GestioneBotRagApiTrovaBot
     */
    readonly trovaBotParam: TrovaBotParams
}

/**
 * GestioneBotRagApi - object-oriented interface
 * @export
 * @class GestioneBotRagApi
 * @extends {BaseAPI}
 */
export class GestioneBotRagApi extends BaseAPI {
    /**
     * Elenco dei bot registrati nel database
     * @summary Elenco bot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestioneBotRagApi
     */
    public elencoBot(options?: RawAxiosRequestConfig) {
        return GestioneBotRagApiFp(this.configuration).elencoBot(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Elimina un bot nel database
     * @summary Elemina bot
     * @param {GestioneBotRagApiEliminaBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestioneBotRagApi
     */
    public eliminaBot(requestParameters: GestioneBotRagApiEliminaBotRequest, options?: RawAxiosRequestConfig) {
        return GestioneBotRagApiFp(this.configuration).eliminaBot(requestParameters.nomeBot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifica le informazioni del bot registrate nel database
     * @summary Modifica bot
     * @param {GestioneBotRagApiModificaBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestioneBotRagApi
     */
    public modificaBot(requestParameters: GestioneBotRagApiModificaBotRequest, options?: RawAxiosRequestConfig) {
        return GestioneBotRagApiFp(this.configuration).modificaBot(requestParameters.modificaBotParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registrazione di un bot all\'interno del database
     * @summary Registra bot
     * @param {GestioneBotRagApiRegistraBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestioneBotRagApi
     */
    public registraBot(requestParameters: GestioneBotRagApiRegistraBotRequest, options?: RawAxiosRequestConfig) {
        return GestioneBotRagApiFp(this.configuration).registraBot(requestParameters.registraBotParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trova un bot nel database
     * @summary Trova bot
     * @param {GestioneBotRagApiTrovaBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestioneBotRagApi
     */
    public trovaBot(requestParameters: GestioneBotRagApiTrovaBotRequest, options?: RawAxiosRequestConfig) {
        return GestioneBotRagApiFp(this.configuration).trovaBot(requestParameters.trovaBotParam, options).then((request) => request(this.axios, this.basePath));
    }
}

