/* tslint:disable */
/* eslint-disable */
/**
 * MS File Management
 * Microservizio dedicato alla gestione dei documenti e delle cartelle per l\'addestramento dei bot
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: f.calo29@studenti.uniba.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CartellaParams } from '../model';
// @ts-ignore
import type { GenericResponseDtoCartelleDto } from '../model';
// @ts-ignore
import type { GenericResponseDtoListCartelleDto } from '../model';
// @ts-ignore
import type { GenericResponseDtoString } from '../model';
// @ts-ignore
import type { ModificaCartellaParams } from '../model';
/**
 * CartelleControllerApi - axios parameter creator
 * @export
 */
export const CartelleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creazione della cartella dove storicizzare i file e aggiornamento db
         * @summary Creazione della cartella
         * @param {CartellaParams} cartellaParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggiungiCartella: async (cartellaParams: CartellaParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartellaParams' is not null or undefined
            assertParamExists('aggiungiCartella', 'cartellaParams', cartellaParams)
            const localVarPath = `/cartelle/crea`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartellaParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Eliminare una cartella cartella e i file contenuti in essa
         * @summary Eliminare una cartella cartella
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elencoCartelle: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cartelle/elenco`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Eliminare una cartella cartella e i file contenuti in essa
         * @summary Eliminare una cartella cartella
         * @param {CartellaParams} cartellaParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminaCartella: async (cartellaParams: CartellaParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartellaParams' is not null or undefined
            assertParamExists('eliminaCartella', 'cartellaParams', cartellaParams)
            const localVarPath = `/cartelle/elimina`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cartellaParams !== undefined) {
                for (const [key, value] of Object.entries(cartellaParams)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Eliminare una cartella cartella e i file contenuti in essa
         * @summary Eliminare una cartella cartella
         * @param {CartellaParams} cartellaParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartella: async (cartellaParams: CartellaParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartellaParams' is not null or undefined
            assertParamExists('findCartella', 'cartellaParams', cartellaParams)
            const localVarPath = `/cartelle/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cartellaParams !== undefined) {
                for (const [key, value] of Object.entries(cartellaParams)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rinominare una cartella cartella e aggiornare i path dei file contenuti in essa
         * @summary Rinominare una cartella cartella
         * @param {ModificaCartellaParams} modificaCartellaParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rinominaCartella: async (modificaCartellaParams: ModificaCartellaParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modificaCartellaParams' is not null or undefined
            assertParamExists('rinominaCartella', 'modificaCartellaParams', modificaCartellaParams)
            const localVarPath = `/cartelle/rinomina`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificaCartellaParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartelleControllerApi - functional programming interface
 * @export
 */
export const CartelleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartelleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Creazione della cartella dove storicizzare i file e aggiornamento db
         * @summary Creazione della cartella
         * @param {CartellaParams} cartellaParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aggiungiCartella(cartellaParams: CartellaParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoCartelleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aggiungiCartella(cartellaParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartelleControllerApi.aggiungiCartella']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Eliminare una cartella cartella e i file contenuti in essa
         * @summary Eliminare una cartella cartella
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elencoCartelle(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoListCartelleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elencoCartelle(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartelleControllerApi.elencoCartelle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Eliminare una cartella cartella e i file contenuti in essa
         * @summary Eliminare una cartella cartella
         * @param {CartellaParams} cartellaParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eliminaCartella(cartellaParams: CartellaParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eliminaCartella(cartellaParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartelleControllerApi.eliminaCartella']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Eliminare una cartella cartella e i file contenuti in essa
         * @summary Eliminare una cartella cartella
         * @param {CartellaParams} cartellaParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCartella(cartellaParams: CartellaParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoCartelleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findCartella(cartellaParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartelleControllerApi.findCartella']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Rinominare una cartella cartella e aggiornare i path dei file contenuti in essa
         * @summary Rinominare una cartella cartella
         * @param {ModificaCartellaParams} modificaCartellaParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rinominaCartella(modificaCartellaParams: ModificaCartellaParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoCartelleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rinominaCartella(modificaCartellaParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartelleControllerApi.rinominaCartella']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartelleControllerApi - factory interface
 * @export
 */
export const CartelleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartelleControllerApiFp(configuration)
    return {
        /**
         * Creazione della cartella dove storicizzare i file e aggiornamento db
         * @summary Creazione della cartella
         * @param {CartelleControllerApiAggiungiCartellaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggiungiCartella(requestParameters: CartelleControllerApiAggiungiCartellaRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoCartelleDto> {
            return localVarFp.aggiungiCartella(requestParameters.cartellaParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Eliminare una cartella cartella e i file contenuti in essa
         * @summary Eliminare una cartella cartella
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elencoCartelle(options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoListCartelleDto> {
            return localVarFp.elencoCartelle(options).then((request) => request(axios, basePath));
        },
        /**
         * Eliminare una cartella cartella e i file contenuti in essa
         * @summary Eliminare una cartella cartella
         * @param {CartelleControllerApiEliminaCartellaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminaCartella(requestParameters: CartelleControllerApiEliminaCartellaRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoString> {
            return localVarFp.eliminaCartella(requestParameters.cartellaParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Eliminare una cartella cartella e i file contenuti in essa
         * @summary Eliminare una cartella cartella
         * @param {CartelleControllerApiFindCartellaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCartella(requestParameters: CartelleControllerApiFindCartellaRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoCartelleDto> {
            return localVarFp.findCartella(requestParameters.cartellaParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Rinominare una cartella cartella e aggiornare i path dei file contenuti in essa
         * @summary Rinominare una cartella cartella
         * @param {CartelleControllerApiRinominaCartellaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rinominaCartella(requestParameters: CartelleControllerApiRinominaCartellaRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoCartelleDto> {
            return localVarFp.rinominaCartella(requestParameters.modificaCartellaParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for aggiungiCartella operation in CartelleControllerApi.
 * @export
 * @interface CartelleControllerApiAggiungiCartellaRequest
 */
export interface CartelleControllerApiAggiungiCartellaRequest {
    /**
     * 
     * @type {CartellaParams}
     * @memberof CartelleControllerApiAggiungiCartella
     */
    readonly cartellaParams: CartellaParams
}

/**
 * Request parameters for eliminaCartella operation in CartelleControllerApi.
 * @export
 * @interface CartelleControllerApiEliminaCartellaRequest
 */
export interface CartelleControllerApiEliminaCartellaRequest {
    /**
     * 
     * @type {CartellaParams}
     * @memberof CartelleControllerApiEliminaCartella
     */
    readonly cartellaParams: CartellaParams
}

/**
 * Request parameters for findCartella operation in CartelleControllerApi.
 * @export
 * @interface CartelleControllerApiFindCartellaRequest
 */
export interface CartelleControllerApiFindCartellaRequest {
    /**
     * 
     * @type {CartellaParams}
     * @memberof CartelleControllerApiFindCartella
     */
    readonly cartellaParams: CartellaParams
}

/**
 * Request parameters for rinominaCartella operation in CartelleControllerApi.
 * @export
 * @interface CartelleControllerApiRinominaCartellaRequest
 */
export interface CartelleControllerApiRinominaCartellaRequest {
    /**
     * 
     * @type {ModificaCartellaParams}
     * @memberof CartelleControllerApiRinominaCartella
     */
    readonly modificaCartellaParams: ModificaCartellaParams
}

/**
 * CartelleControllerApi - object-oriented interface
 * @export
 * @class CartelleControllerApi
 * @extends {BaseAPI}
 */
export class CartelleControllerApi extends BaseAPI {
    /**
     * Creazione della cartella dove storicizzare i file e aggiornamento db
     * @summary Creazione della cartella
     * @param {CartelleControllerApiAggiungiCartellaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartelleControllerApi
     */
    public aggiungiCartella(requestParameters: CartelleControllerApiAggiungiCartellaRequest, options?: RawAxiosRequestConfig) {
        return CartelleControllerApiFp(this.configuration).aggiungiCartella(requestParameters.cartellaParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Eliminare una cartella cartella e i file contenuti in essa
     * @summary Eliminare una cartella cartella
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartelleControllerApi
     */
    public elencoCartelle(options?: RawAxiosRequestConfig) {
        return CartelleControllerApiFp(this.configuration).elencoCartelle(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Eliminare una cartella cartella e i file contenuti in essa
     * @summary Eliminare una cartella cartella
     * @param {CartelleControllerApiEliminaCartellaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartelleControllerApi
     */
    public eliminaCartella(requestParameters: CartelleControllerApiEliminaCartellaRequest, options?: RawAxiosRequestConfig) {
        return CartelleControllerApiFp(this.configuration).eliminaCartella(requestParameters.cartellaParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Eliminare una cartella cartella e i file contenuti in essa
     * @summary Eliminare una cartella cartella
     * @param {CartelleControllerApiFindCartellaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartelleControllerApi
     */
    public findCartella(requestParameters: CartelleControllerApiFindCartellaRequest, options?: RawAxiosRequestConfig) {
        return CartelleControllerApiFp(this.configuration).findCartella(requestParameters.cartellaParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rinominare una cartella cartella e aggiornare i path dei file contenuti in essa
     * @summary Rinominare una cartella cartella
     * @param {CartelleControllerApiRinominaCartellaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartelleControllerApi
     */
    public rinominaCartella(requestParameters: CartelleControllerApiRinominaCartellaRequest, options?: RawAxiosRequestConfig) {
        return CartelleControllerApiFp(this.configuration).rinominaCartella(requestParameters.modificaCartellaParams, options).then((request) => request(this.axios, this.basePath));
    }
}

