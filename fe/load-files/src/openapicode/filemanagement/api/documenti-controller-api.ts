/* tslint:disable */
/* eslint-disable */
/**
 * MS File Management
 * Microservizio dedicato alla gestione dei documenti e delle cartelle per l\'addestramento dei bot
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: f.calo29@studenti.uniba.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EliminaDocumento } from '../model';
// @ts-ignore
import type { FindDocumentoParams } from '../model';
// @ts-ignore
import type { GenericResponseDtoDocumentiDto } from '../model';
// @ts-ignore
import type { GenericResponseDtoListDocumentiDto } from '../model';
// @ts-ignore
import type { GenericResponseDtoString } from '../model';
// @ts-ignore
import type { ModificaDocumentiParams } from '../model';
/**
 * DocumentiControllerApi - axios parameter creator
 * @export
 */
export const DocumentiControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elencoFile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/documenti/elenco`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EliminaDocumento} eliminaDocumento 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminaFile: async (eliminaDocumento: EliminaDocumento, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eliminaDocumento' is not null or undefined
            assertParamExists('eliminaFile', 'eliminaDocumento', eliminaDocumento)
            const localVarPath = `/documenti/elimina`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eliminaDocumento !== undefined) {
                for (const [key, value] of Object.entries(eliminaDocumento)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindDocumentoParams} findDocumentoParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFile: async (findDocumentoParams: FindDocumentoParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findDocumentoParams' is not null or undefined
            assertParamExists('findFile', 'findDocumentoParams', findDocumentoParams)
            const localVarPath = `/documenti/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (findDocumentoParams !== undefined) {
                for (const [key, value] of Object.entries(findDocumentoParams)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModificaDocumentiParams} modificaDocumentiParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rinominaFile: async (modificaDocumentiParams: ModificaDocumentiParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modificaDocumentiParams' is not null or undefined
            assertParamExists('rinominaFile', 'modificaDocumentiParams', modificaDocumentiParams)
            const localVarPath = `/documenti/rinomina`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificaDocumentiParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModificaDocumentiParams} modificaDocumentiParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spostaFile: async (modificaDocumentiParams: ModificaDocumentiParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modificaDocumentiParams' is not null or undefined
            assertParamExists('spostaFile', 'modificaDocumentiParams', modificaDocumentiParams)
            const localVarPath = `/documenti/sposta`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modificaDocumentiParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uploadDir 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (uploadDir: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadDir' is not null or undefined
            assertParamExists('uploadFile', 'uploadDir', uploadDir)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFile', 'file', file)
            const localVarPath = `/documenti/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (uploadDir !== undefined) {
                localVarQueryParameter['uploadDir'] = uploadDir;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentiControllerApi - functional programming interface
 * @export
 */
export const DocumentiControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentiControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elencoFile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoListDocumentiDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elencoFile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentiControllerApi.elencoFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EliminaDocumento} eliminaDocumento 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eliminaFile(eliminaDocumento: EliminaDocumento, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eliminaFile(eliminaDocumento, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentiControllerApi.eliminaFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindDocumentoParams} findDocumentoParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findFile(findDocumentoParams: FindDocumentoParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoDocumentiDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findFile(findDocumentoParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentiControllerApi.findFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ModificaDocumentiParams} modificaDocumentiParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rinominaFile(modificaDocumentiParams: ModificaDocumentiParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rinominaFile(modificaDocumentiParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentiControllerApi.rinominaFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ModificaDocumentiParams} modificaDocumentiParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spostaFile(modificaDocumentiParams: ModificaDocumentiParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spostaFile(modificaDocumentiParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentiControllerApi.spostaFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uploadDir 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(uploadDir: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponseDtoString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(uploadDir, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentiControllerApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DocumentiControllerApi - factory interface
 * @export
 */
export const DocumentiControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentiControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elencoFile(options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoListDocumentiDto> {
            return localVarFp.elencoFile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentiControllerApiEliminaFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminaFile(requestParameters: DocumentiControllerApiEliminaFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoString> {
            return localVarFp.eliminaFile(requestParameters.eliminaDocumento, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentiControllerApiFindFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findFile(requestParameters: DocumentiControllerApiFindFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoDocumentiDto> {
            return localVarFp.findFile(requestParameters.findDocumentoParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentiControllerApiRinominaFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rinominaFile(requestParameters: DocumentiControllerApiRinominaFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoString> {
            return localVarFp.rinominaFile(requestParameters.modificaDocumentiParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentiControllerApiSpostaFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spostaFile(requestParameters: DocumentiControllerApiSpostaFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoString> {
            return localVarFp.spostaFile(requestParameters.modificaDocumentiParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentiControllerApiUploadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(requestParameters: DocumentiControllerApiUploadFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<GenericResponseDtoString> {
            return localVarFp.uploadFile(requestParameters.uploadDir, requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for eliminaFile operation in DocumentiControllerApi.
 * @export
 * @interface DocumentiControllerApiEliminaFileRequest
 */
export interface DocumentiControllerApiEliminaFileRequest {
    /**
     * 
     * @type {EliminaDocumento}
     * @memberof DocumentiControllerApiEliminaFile
     */
    readonly eliminaDocumento: EliminaDocumento
}

/**
 * Request parameters for findFile operation in DocumentiControllerApi.
 * @export
 * @interface DocumentiControllerApiFindFileRequest
 */
export interface DocumentiControllerApiFindFileRequest {
    /**
     * 
     * @type {FindDocumentoParams}
     * @memberof DocumentiControllerApiFindFile
     */
    readonly findDocumentoParams: FindDocumentoParams
}

/**
 * Request parameters for rinominaFile operation in DocumentiControllerApi.
 * @export
 * @interface DocumentiControllerApiRinominaFileRequest
 */
export interface DocumentiControllerApiRinominaFileRequest {
    /**
     * 
     * @type {ModificaDocumentiParams}
     * @memberof DocumentiControllerApiRinominaFile
     */
    readonly modificaDocumentiParams: ModificaDocumentiParams
}

/**
 * Request parameters for spostaFile operation in DocumentiControllerApi.
 * @export
 * @interface DocumentiControllerApiSpostaFileRequest
 */
export interface DocumentiControllerApiSpostaFileRequest {
    /**
     * 
     * @type {ModificaDocumentiParams}
     * @memberof DocumentiControllerApiSpostaFile
     */
    readonly modificaDocumentiParams: ModificaDocumentiParams
}

/**
 * Request parameters for uploadFile operation in DocumentiControllerApi.
 * @export
 * @interface DocumentiControllerApiUploadFileRequest
 */
export interface DocumentiControllerApiUploadFileRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentiControllerApiUploadFile
     */
    readonly uploadDir: string

    /**
     * 
     * @type {File}
     * @memberof DocumentiControllerApiUploadFile
     */
    readonly file: File
}

/**
 * DocumentiControllerApi - object-oriented interface
 * @export
 * @class DocumentiControllerApi
 * @extends {BaseAPI}
 */
export class DocumentiControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentiControllerApi
     */
    public elencoFile(options?: RawAxiosRequestConfig) {
        return DocumentiControllerApiFp(this.configuration).elencoFile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentiControllerApiEliminaFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentiControllerApi
     */
    public eliminaFile(requestParameters: DocumentiControllerApiEliminaFileRequest, options?: RawAxiosRequestConfig) {
        return DocumentiControllerApiFp(this.configuration).eliminaFile(requestParameters.eliminaDocumento, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentiControllerApiFindFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentiControllerApi
     */
    public findFile(requestParameters: DocumentiControllerApiFindFileRequest, options?: RawAxiosRequestConfig) {
        return DocumentiControllerApiFp(this.configuration).findFile(requestParameters.findDocumentoParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentiControllerApiRinominaFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentiControllerApi
     */
    public rinominaFile(requestParameters: DocumentiControllerApiRinominaFileRequest, options?: RawAxiosRequestConfig) {
        return DocumentiControllerApiFp(this.configuration).rinominaFile(requestParameters.modificaDocumentiParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentiControllerApiSpostaFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentiControllerApi
     */
    public spostaFile(requestParameters: DocumentiControllerApiSpostaFileRequest, options?: RawAxiosRequestConfig) {
        return DocumentiControllerApiFp(this.configuration).spostaFile(requestParameters.modificaDocumentiParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentiControllerApiUploadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentiControllerApi
     */
    public uploadFile(requestParameters: DocumentiControllerApiUploadFileRequest, options?: RawAxiosRequestConfig) {
        return DocumentiControllerApiFp(this.configuration).uploadFile(requestParameters.uploadDir, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}

